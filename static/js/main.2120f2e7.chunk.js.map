{"version":3,"sources":["components/error.js","components/pregunta.js","components/formulario.js","components/gasto.js","components/mostrarGasto.js","components/controlPresupuesto.js","helpers.js","App.js","serviceWorker.js","index.js"],"names":["Error","props","className","aviso","propType","PropTypes","string","isRequired","Pregunta","useState","cantidad","setCantidad","error","setError","onSubmit","e","preventDefault","isNaN","setPresupuesto","setPreRestante","setMostrarPregunta","type","placeholder","onChange","parseInt","target","value","Formulario","nombre","setNombre","precio","setPrecio","trim","gasto","id","shortid","generate","setGasto","setCrearGasto","Gasto","MostrarGasto","gastos","map","key","ControlPresupuesto","presupuesto","preRestante","App","mostrarPregunta","setGastos","crearGasto","useEffect","presupuestoRestante","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.2120f2e7.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nfunction Error(props) {\r\n    return (\r\n        \r\n            <p className=\"error\">{props.aviso}</p>\r\n      \r\n    )\r\n}\r\nError.propType = {\r\n    aviso:PropTypes.string.isRequired\r\n}\r\nexport default Error\r\n","import React, { useState } from 'react'\r\nimport Error from './error'\r\nimport PropTypes from 'prop-types'\r\n\r\nfunction Pregunta(props) {\r\n    const [cantidad, setCantidad] = useState(0);\r\n\r\n    const [error, setError] = useState(false)\r\n\r\n    const handleChange = (e) => {\r\n        setCantidad(parseInt(e.target.value))\r\n    }\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n\r\n        // validar\r\n        if(cantidad === '' || cantidad <= 0 || isNaN(cantidad)  ){\r\n            setError(true)\r\n            return;\r\n        }\r\n        //todo esto si pasa la validacion\r\n                             // limpiar el mensaje de error\r\n        setError(false)\r\n                            // los 2 setState para guardar el presupuesto en el state de app.js\r\n        props.setPresupuesto(cantidad);\r\n        props.setPreRestante(cantidad);\r\n                            // si pasa la validacion significa que ingreso bien la plata, entonces le asignamos false\r\n                            // para que en App.js aplique el ternario como false y se oculte este component\r\n        props.setMostrarPregunta(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"contenedor-pregunta\">\r\n            <h2>Coloca tu Presupuesto</h2>\r\n            {\r\n                error && <Error aviso=\"Error! Complete Bien los Campos\"/>\r\n            }\r\n\r\n\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                   type=\"number\"\r\n                   placeholder=\"Colocalo Aqui\"\r\n                   onChange={handleChange}\r\n                \r\n                />\r\n                <input \r\n                   type=\"submit\" \r\n                />\r\n            </form>\r\n         \r\n        </div>\r\n    )\r\n}\r\nPregunta.propTypes = {\r\n    setPresupuesto:PropTypes.func.isRequired,\r\n    setPreRestante:PropTypes.func.isRequired,\r\n    setMostrarPregunta:PropTypes.func.isRequired\r\n}\r\n\r\nexport default Pregunta\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport shortid from 'shortid'\r\nimport Error from './error';\r\n\r\nfunction Formulario(props) {\r\n    \r\n    // state para calcular los gastos\r\n    const [nombre, setNombre] = useState('');\r\n    const [precio, setPrecio] = useState(0);\r\n\r\n    const [error, setError] = useState(false)\r\n\r\n    const agregarGasto = e =>{\r\n        e.preventDefault();\r\n\r\n        // validar\r\n        if(nombre.trim() ==='' || precio < 1 || isNaN(precio) ){\r\n           setError(true)\r\n           return;\r\n        }\r\n        setError(false);\r\n\r\n        // construir gasto\r\n        const gasto = {\r\n            nombre,\r\n            precio,\r\n            id:shortid.generate()\r\n        }\r\n       \r\n\r\n        // pasar el gasto al componente principal\r\n        props.setGasto(gasto);\r\n \r\n        // una vez que se genere el gasto pasa a true\r\n        props.setCrearGasto(true);\r\n\r\n        // resetear el form\r\n        setNombre('');\r\n        setPrecio(0);\r\n\r\n\r\n        \r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <form className=\"contenedor-form\" onSubmit={agregarGasto}>\r\n            <h2>Agrega tus Gastos Aqu√≠</h2>\r\n            {\r\n                error && <Error aviso=\"Error! Revisar los Campos Ingresados\"/> \r\n            }\r\n            <div>\r\n                <label>Nombre Gasto</label>\r\n                <input  \r\n                   type=\"text\"\r\n                   placeholder=\"ej: Transporte\"\r\n                   value={nombre}\r\n                   onChange={e => setNombre(e.target.value)}\r\n                />\r\n\r\n                <label>Precio</label>\r\n                <input\r\n                   type=\"number\" \r\n                   placeholder=\"ej: 300\" \r\n                   value={precio}  \r\n                   onChange={e => setPrecio(e.target.value)}\r\n                />\r\n\r\n                <input type=\"submit\" value=\"Agregar Gasto\" />   \r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nFormulario.propTypes = {\r\n    setGasto:PropTypes.func.isRequired,\r\n    setCrearGasto:PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nfunction Gasto(props) {\r\n    return (\r\n        <ul className=\"contenedor-gasto\">\r\n            <li>{props.gasto.nombre}</li>\r\n            <li>$ {props.gasto.precio}</li>\r\n        </ul>\r\n    )\r\n}\r\nGasto.propTypes={\r\n    gasto:PropTypes.object.isRequired\r\n}\r\nexport default Gasto\r\n","import React from 'react'\r\nimport Gasto from './gasto';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction MostrarGasto(props) {\r\n    return (\r\n        <div className=\"contenedor-mostrargasto\">\r\n            <h2>Listado</h2>\r\n            {\r\n                props.gastos.map(gasto =>\r\n                    <Gasto\r\n                       gasto={gasto}\r\n                       key={gasto.id}\r\n                    />\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\nMostrarGasto.propTypes ={\r\n    gastos:PropTypes.array.isRequired\r\n}\r\n\r\nexport default MostrarGasto\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport {revisarPresupuesto} from '../helpers'\r\n\r\nfunction ControlPresupuesto(props) {\r\n\r\n    return (\r\n        <div className=\"contenedor-controlpresupuesto\">\r\n           <p>Presupuesto : $ {props.presupuesto}</p>  \r\n\r\n           {/* el archivo helpers trae la funcion revisarPresupuesto que viene con condicionales.y la clase que \r\n           corresponda se agrega  al className de la \"p\" \"preRestante\" */}\r\n           <p className={revisarPresupuesto(props.presupuesto, props.preRestante)}>Restante : $ {props.preRestante}</p>\r\n        </div>\r\n    )\r\n}\r\nControlPresupuesto.propTypes = {\r\n    presupuesto:PropTypes.number.isRequired,\r\n    preRestante:PropTypes.number.isRequired\r\n}\r\nexport default ControlPresupuesto\r\n","export const revisarPresupuesto = (presupuesto, preRestante) => {\r\n    let clase;\r\n    \r\n      // si el valor de el presupuesto % 4 que haya puesto, es mayor al 'restante'(la plata que me queda) .. \r\n    if( (presupuesto / 4) > preRestante){\r\n       clase = 'rojo'\r\n    }else if( (presupuesto / 2) > preRestante){\r\n        clase = 'amarillo'\r\n    }else{\r\n        // si ninguna condicion se cumple significa que que no hemos gastado menos del 50% \r\n        clase = 'verde'\r\n    }\r\n    \r\n    return clase;\r\n}\r\n\r\n// ","import React, {useState, useEffect} from 'react';\nimport Pregunta from './components/pregunta';\nimport Formulario from './components/formulario';\nimport MostrarGasto from './components/mostrarGasto';\nimport ControlPresupuesto from './components/controlPresupuesto';\n\nfunction App() {\n  const [presupuesto, setPresupuesto] = useState(0);\n  const [preRestante, setPreRestante] = useState(0);\n  // carga condicional de components\n  const [mostrarPregunta, setMostrarPregunta] = useState(true)\n  \n  \n\n  // se almacenar√° el objeto gasto de formulario.js conteniendo el nombre y precio.. y este pasar√° a gastos\n  const [gasto, setGasto] = useState({})\n  const [gastos, setGastos] = useState([])\n\n\n  const [crearGasto, setCrearGasto] = useState(false)\n  // useEfect que actualiza el presupuesto restante del state 'preRestante' asi muestra cuanta plata queda\n  useEffect( () =>{\n    if(crearGasto){\n      // agrega el nuevo presupuesto\n      setGastos([\n        ...gastos,\n       gasto\n      ])\n\n      // resta del presupuesto actual (creamos una variable)\n      const presupuestoRestante= preRestante - gasto.precio;\n      setPreRestante(presupuestoRestante);\n      \n      \n      // resetear a false\n      setCrearGasto(false)\n    }\n  }, [gasto, crearGasto, gastos, preRestante])\n\n  return (\n    <div >\n      <header>\n        <h1>Gasto Semanal</h1>\n      </header>\n\n      {/* en caso de que \"mostrarPregunta\" sea true se mostrar√° la pregunta inicial .. y cuando se de enter con el dato\n      inicial,  aparecer√° el formulario y los datos.. el componente Pregunta se ocultar√° porque no se sar√° necesario */}\n      {\n        mostrarPregunta ? \n        ( <Pregunta\n              setPresupuesto={setPresupuesto}\n              setPreRestante={setPreRestante}\n              setMostrarPregunta={setMostrarPregunta}\n          />\n        ) : \n        ( <div className=\"contenedor-div\">\n            <Formulario\n              setGasto={setGasto}\n              setCrearGasto={setCrearGasto}\n\n              />      \n\n            <div className=\"contenedor-2\">\n              <MostrarGasto\n                 gastos={gastos}\n              /> \n  \n              <ControlPresupuesto\n                 presupuesto={presupuesto}\n                 preRestante={preRestante}\n              /> \n            </div>\n\n          </div>\n        )  \n      }\n\n   \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './normalize.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}